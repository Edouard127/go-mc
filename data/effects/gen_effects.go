//go:build generate
// +build generate

package main

import (
	"encoding/json"
	"github.com/iancoleman/strcase"
	"net/http"
	"os"
	"text/template"
)

const (
	version = "1.20.1"
	infoURL = "https://raw.githubusercontent.com/PrismarineJS/minecraft-data/master/data/pc/" + version + "/effects.json"
	//language=gohtml
	effectTmpl = `// Code generated by gen_effects.go DO NOT EDIT.
// Package effects stores information about potion effects in Minecraft.
package effects

type EffectStatus struct {
	ID          int32
	Amplifier   byte
	Duration	int32
	ShowParticles bool
	ShowIcon bool
}


// Item describes information about a type of item.
type Effect struct {
	ID          int32
	DisplayName string
	Name        string
	Type        string
}

var (
	{{- range .}}
	{{.CamelName}} = Effect{
		ID: {{.ID}},
		DisplayName: "{{.DisplayName}}",
		Name: "{{.Name}}",
		Type: "{{.Type}}",
	}{{end}}
)

// ByID is an index of minecraft items by their ID.
var ByID = map[int32]*Effect{ {{range .}}
	{{.ID}}: &{{.CamelName}},{{end}}
}

// ByName is an index of minecraft items by their name.
var ByName = map[string]*Effect{ {{range .}}
	"{{.Name}}": &{{.CamelName}},{{end}}
}`
)

type Effect struct {
	ID          uint32 `json:"id"`
	CamelName   string `json:"-"`
	DisplayName string `json:"displayName"`
	Name        string `json:"name"`
	Type        string `json:"type"`
}

func downloadInfo() ([]*Effect, error) {
	resp, err := http.Get(infoURL)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()

	var data []*Effect
	if err := json.NewDecoder(resp.Body).Decode(&data); err != nil {
		return nil, err
	}
	for _, d := range data {
		d.CamelName = strcase.ToCamel(d.Name)
	}
	return data, nil
}

//go:generate go run $GOFILE
//go:generate go fmt effects.go
func main() {
	data, err := downloadInfo()
	if err != nil {
		panic(err)
	}

	tmpl, err := template.New("effects").Parse(effectTmpl)
	if err != nil {
		panic(err)
	}

	f, err := os.Create("effects.go")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	if err := tmpl.Execute(f, data); err != nil {
		panic(err)
	}
}
